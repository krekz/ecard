/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/kz6lJUYQen8
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Button } from "@/components/ui/button";
import {
  PopoverTrigger,
  PopoverContent,
  Popover,
} from "@/components/ui/popover";
import {
  SelectValue,
  SelectTrigger,
  SelectContent,
  Select,
  SelectItem,
} from "@/components/ui/select";
import { useState } from "react";
import { useFormContext } from "react-hook-form";

const useFormattedTime = () => {
  const [hour, setHour] = useState('12');
  const [minute, setMinute] = useState('00');
  const [period, setPeriod] = useState('AM');

  const handleHourChange = (value:string) => {
    setHour(value);
  };

  const handleMinuteChange = (value:string) => {
    setMinute(value);
  };

  const handlePeriodChange = (value:string) => {
    setPeriod(value);
  };

  const formattedTime = `${hour}:${minute} ${period}`;

  return {
    formattedTime,
    handleHourChange,
    handleMinuteChange,
    handlePeriodChange,
  };
};

const TimePicker = (props: {name:string}) => {
  const { register, setValue } = useFormContext();
  const {
    formattedTime,
    handleHourChange,
    handleMinuteChange,
    handlePeriodChange,
  } = useFormattedTime();

  const updateFormattedTime = () => {
    setValue('formattedTime', formattedTime);
  };

  const hours = Array.from({ length: 12 }, (_, i) => String(i + 1).padStart(2, '0'));
  const minutes = Array.from({ length: 60 }, (_, i) => String(i).padStart(2, '0'));

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button className="w-[180px] justify-start text-left font-normal" variant="outline">
          <ClockIcon className="mr-2 h-4 w-4" />
          <span>Select time</span>
        </Button>
      </PopoverTrigger>
      <PopoverContent align="start" className="w-auto p-0">
        <div className="grid grid-cols-3 gap-4 p-4">
          <Select onValueChange={handleHourChange}>
            <SelectTrigger className="w-20">
              <SelectValue placeholder="12" />
            </SelectTrigger>
            <SelectContent>
              {hours.map((h) => (
                <SelectItem key={h} value={h} onClick={updateFormattedTime}>
                  {h}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <Select onValueChange={handleMinuteChange}>
            <SelectTrigger className="w-20">
              <SelectValue placeholder="00" />
            </SelectTrigger>
            <SelectContent>
              {minutes.map((m) => (
                <SelectItem key={m} value={m} onClick={updateFormattedTime}>
                  {m}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <Select onValueChange={handlePeriodChange}>
            <SelectTrigger className="w-20">
              <SelectValue placeholder="AM" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="AM" onClick={updateFormattedTime}>
                AM
              </SelectItem>
              <SelectItem value="PM" onClick={updateFormattedTime}>
                PM
              </SelectItem>
            </SelectContent>
          </Select>
        </div>
        <div className="border-t bg-gray-100 px-4 py-3 dark:bg-gray-800">
          <div className="flex items-center justify-between">
            <span className="text-sm font-medium">Selected time:</span>
            <input {...register(props.name)} value={formattedTime} readOnly />
          </div>
        </div>
      </PopoverContent>
    </Popover>
  );
};

export default TimePicker;

function ClockIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <circle cx="12" cy="12" r="10" />
      <polyline points="12 6 12 12 16 14" />
    </svg>
  );
}
