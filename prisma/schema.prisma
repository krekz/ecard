generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  state         String?
  district      String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  cards         ECard[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model ECard {
  id             String        @id @default(cuid())
  userId         String?
  plan           String
  designId       String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  father         String
  mother         String
  bride          String
  groom          String
  couple         String
  phone_number   String
  published      Boolean       @default(false)
  youtubeURL     String?
  primary_font   String
  secondary_font String
  images         CardGallery[]
  donation       Donation?
  event          Event?
  heirs          Heirs[]
  Design         Design        @relation(fields: [designId], references: [designId])

  Plans Plans @relation(fields: [plan], references: [name])

  User User? @relation(fields: [userId], references: [id])
}

model Heirs {
  id           Int     @id @default(autoincrement())
  name         String?
  phone_number String?
  relationship String?
  eCardId      String?
  ECard        ECard?  @relation(fields: [eCardId], references: [id])
}

model Event {
  id         Int      @id @default(autoincrement())
  venue      String
  address    String
  date       DateTime @db.Date
  start_time String
  end_time   String
  gMap       String?
  greeting   String
  eCardId    String   @unique
  ECard      ECard    @relation(fields: [eCardId], references: [id])
}

model Donation {
  id        Int     @id @default(autoincrement())
  name      String?
  bank      String?
  accountNo String?
  qrCode    String?
  eCardId   String? @unique
  ECard     ECard?  @relation(fields: [eCardId], references: [id])
}

model Design {
  designId String @unique
  category String
  name     String
  url      String

  ECard ECard[]
}

model Plans {
  name  String @unique
  price Float

  ECard ECard[]
}

model CardGallery {
  id      String  @id @default(cuid())
  url     String
  ECard   ECard?  @relation(fields: [eCardId], references: [id])
  eCardId String?
}
