generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime @db.Timestamptz(3)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  role          Role          @default(USER)
  state         String?
  district      String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified") @db.Timestamptz(3)
  image         String?
  accounts      Account[]
  sessions      Session[]
  cards         ECard[]
  vouchers      UserVoucher[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime @db.Timestamptz(3)

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model ECard {
  id             String        @id @default(cuid())
  userId         String?
  // plan           String
  designId       String
  createdAt      DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime      @updatedAt @db.Timestamptz(3)
  father         String
  mother         String
  bride          String
  groom          String
  couple         String
  phone_number   String
  published      Boolean       @default(false)
  youtube_url    String?
  primary_font   String
  secondary_font String
  images         CardGallery[]
  donation       Donation?
  event          Event?
  heirs          Heirs?
  Design         Design        @relation(fields: [designId], references: [designId])

  // Plans Plans @relation(fields: [plan], references: [name])

  User User? @relation(fields: [userId], references: [id])
}

model Heirs {
  id           Int     @id @default(autoincrement())
  name         String?
  phone_number String?
  relationship String?
  eCardId      String? @unique
  ECard        ECard?  @relation(fields: [eCardId], references: [id])
}

model Event {
  id         Int      @id @default(autoincrement())
  venue      String
  address    String
  date       DateTime @db.Timestamptz(3)
  start_time String
  end_time   String
  gMap       String?
  greeting   String
  eCardId    String   @unique
  ECard      ECard    @relation(fields: [eCardId], references: [id])
}

model Donation {
  id         Int     @id @default(autoincrement())
  acc_name   String?
  bank       String?
  acc_number String?
  qrCode     String?
  eCardId    String? @unique
  ECard      ECard?  @relation(fields: [eCardId], references: [id])
}

model Design {
  designId           String @unique
  category           String
  name               String
  thumbnail          String
  front_design_url   String
  content_design_url String

  ECard ECard[]
}

// model Plans {
//   name  String @unique
//   price Float

//   ECard ECard[]
// }

model CardGallery {
  id      String  @id @default(cuid())
  url     String
  ECard   ECard?  @relation(fields: [eCardId], references: [id])
  eCardId String?
}

model Voucher {
  code        String @unique
  description String
  amount      String

  users UserVoucher[]
}

model UserVoucher {
  voucherId String
  userId    String
  User      User?    @relation(fields: [userId], references: [id])
  Voucher   Voucher? @relation(fields: [voucherId], references: [code])

  @@id([userId, voucherId])
}
