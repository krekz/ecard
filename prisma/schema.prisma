generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime @db.Timestamptz(3)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  state         String?
  district      String?
  referral      String?
  email         String?       @unique
  emailVerified DateTime?     @map("email_verified") @db.Timestamptz(3)
  image         String?
  role          String        @default("super_admin")
  createdAt     DateTime      @default(now()) @db.Timestamptz(3)
  cards         ECard[]
  vouchers      UserVoucher[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime @db.Timestamptz(3)

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model ECard {
  id             String        @id @default(cuid())
  father         String
  mother         String
  bride          String
  groom          String
  couple         String
  phone_number   String
  primary_font   String
  secondary_font String
  youtube_url    String?
  images         CardGallery[]
  donation       Donation?
  event          Event?
  heirs          Heirs?
  userId         String?
  designId       String
  published      Boolean       @default(false)
  createdAt      DateTime      @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime      @updatedAt @db.Timestamptz(3)
  Design         Design        @relation(fields: [designId], references: [designId], onDelete: Cascade)
  User           User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Program        Program?      @relation(fields: [programId], references: [id])
  programId      Int?
}

model Heirs {
  id           Int     @id @default(autoincrement())
  name         String?
  phone_number String?
  relationship String?
  eCardId      String? @unique
  ECard        ECard?  @relation(fields: [eCardId], references: [id], onDelete: Cascade)
}

model Event {
  id       Int       @id @default(autoincrement())
  venue    String
  address  String
  date     DateTime  @db.Timestamptz(3)
  gMap     String?
  greeting String
  program  Program[]
  eCardId  String    @unique

  ECard     ECard @relation(fields: [eCardId], references: [id], onDelete: Cascade)
  programId Int?
}

model Program {
  id         Int     @id @default(autoincrement())
  name       String?
  start_time String?

  ECard   ECard[]
  Event   Event?  @relation(fields: [eventId], references: [id])
  eventId Int?
}

model Donation {
  id         Int     @id @default(autoincrement())
  acc_name   String?
  acc_number String?
  bank       String?
  qrCode     String?
  eCardId    String? @unique

  ECard ECard? @relation(fields: [eCardId], references: [id], onDelete: Cascade)
}

model Design {
  designId           String  @unique
  name               String
  category           String
  thumbnail_url      String
  front_design_url   String
  content_design_url String
  ECard              ECard[]
}

model CardGallery {
  id      String  @id @default(cuid())
  url     String
  eCardId String?
  ECard   ECard?  @relation(fields: [eCardId], references: [id], onDelete: Cascade)
}

model Voucher {
  code         String        @unique
  description  String
  active       Boolean       @default(true)
  count_claims Int           @default(0)
  max_claims   Int
  users        UserVoucher[]
}

model UserVoucher {
  voucherId String
  userId    String
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Voucher   Voucher @relation(fields: [voucherId], references: [code], onDelete: Cascade)

  @@id([userId, voucherId])
}
