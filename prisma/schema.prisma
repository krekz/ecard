// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

//vercel postgres
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  Int
}

model Profile {
  id     Int     @id @default(autoincrement())
  bio    String?
  user   User    @relation(fields: [userId], references: [id])
  userId Int     @unique
}

model User {
  id      Int      @id @default(autoincrement())
  email   String   @unique
  name    String?
  posts   Post[]
  profile Profile?
}

model ECard {
  id           String    @id @default(cuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  father       String
  mother       String
  bride        String
  groom        String
  couple       String
  phone_number String
  published    Boolean   @default(false)
  youtubeURL   String?
  heirs        Heirs[]
  event        Event?
  donation     Donation?
}

model Heirs {
  id           Int     @id @default(autoincrement())
  name         String?
  phone_number String?
  relationship String?
  ECard        ECard   @relation(fields: [eCardId], references: [id])
  eCardId      String
}

model Event {
  id       Int      @id @default(autoincrement())
  venue    String
  address  String
  date     DateTime
  time     String
  gMap     String?
  greeting String

  ECard   ECard?  @relation(fields: [eCardId], references: [id])
  eCardId String? @unique
}

model Donation {
  id        Int     @id @default(autoincrement())
  name      String?
  bank      String?
  accountNo String?
  qrCode    String?
  
  ECard     ECard?   @relation(fields: [eCardId], references: [id])
  eCardId   String?  @unique
}
